class Solution {
    public static int gcd(int a,int b)
    {
        if(b==0)
         return a;
        return gcd(b,a%b);
    }
    public long interchangeableRectangles(int[][] rectangles) {
        int row = rectangles.length;
        for(int i=0;i<row;i++)
        {
            int width = rectangles[i][0];
            int height = rectangles[i][1];
            int div = gcd(width,height);
            rectangles[i][0] =  rectangles[i][0]/div;
            rectangles[i][1] =  rectangles[i][1]/div;
        }
        HashMap<String,Integer> hm = new HashMap<>();
        for(int i=0;i<row;i++)
        {
            String str = Integer.toString(rectangles[i][0]);
                    str+=",";
                    str+=Integer.toString(rectangles[i][1]);
            if(hm.containsKey(str))
            {
               hm.put(str,hm.get(str)+1);
            }
            else
            {
                hm.put(str,0);
            }
        }
        long count = 0;
        for(Map.Entry e : hm.entrySet())
        {
           int k = (int)e.getValue();
           long k1 = k;
           if(k>0)
            {
                count+=(k1*(k1+1))/2;
            }
        }
        return count;
    }
}
