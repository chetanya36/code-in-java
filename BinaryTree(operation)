import java.util.*;
public class Main
{
    static class Node{
        int data;
        Node left;
        Node right;
        
        Node(int data)
        {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }
    static class BinaryTree{
        static int idx =-1;
        public static Node buildtree(int nodes[])
        {
            idx++;
            if(nodes[idx] == -1)
            {
                return null;
            }
            
            Node newNode = new Node(nodes[idx]);
            newNode.left = buildtree(nodes);
            newNode.right = buildtree(nodes);
            return newNode;
        }
    }
    public static void Levelorder(Node root)
    {
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        q.add(null);
        
        while(!q.isEmpty())
        {
            Node currNode =  q.remove();
            if(currNode == null)
            {
                System.out.println();
                if(q.isEmpty())
                   break;
                else
                  q.add(null);
            }
            else
            {
                System.out.print(currNode.data+" ");
                if(currNode.left != null)
                {
                    q.add(currNode.left);
                }
                if(currNode.right !=null)
                {
                    q.add(currNode.right);
                }
            }
        }
    }
    
    public static int countofNodes(Node root)
    {
        if(root == null)
         return 0;
        int leftNode = countofNodes(root.left);
        int rightNode = countofNodes(root.right);
        
        return 1+leftNode + rightNode;
    }
    public static int SumofNodes(Node root)
    {
        if(root == null)
           return 0;
        int leftSum = SumofNodes(root.left);
        int rightSum = SumofNodes(root.right);
        
        return root.data + leftSum + rightSum;
    }
    
    public static int HeightofTree(Node root)
    {
        if(root == null)
        {
            return 0;
        }
        int leftHeight =  HeightofTree(root.left);
        int rightHeight = HeightofTree(root.right);
         return Math.max(leftHeight,rightHeight) +1;
    }
    //Aproach 1 to calculate the diameter of the tree
    
    public static int Diameter(Node root)
    {
        if(root == null)
         return 0;
        int leftDiameter = Diameter(root.left);
        int rightDiameter = Diameter(root.right);
        int treeDiameter = HeightofTree(root.left) + HeightofTree(root.right) +1;
         
         return Math.max(leftDiameter, Math.max(rightDiameter, treeDiameter));
    }
    
    // Approach 2 to calculate the diameter of treeDiameter O(N)
    
   static class Treeinfo
    {
        int ht;
        int diam;
        
        Treeinfo(int ht , int diam)
        {
            this.ht = ht;
            this.diam = diam;
        }
    }
    
    public static Treeinfo diameter2(Node root)
    {
        if(root == null)
        {
            return new Treeinfo(0,0);
        }
        Treeinfo left  = diameter2(root.left);
        Treeinfo right = diameter2(root.right);
        
       int  myheight = Math.max(left.ht, right.diam)+1;
        
        int diam1 = left.diam;
        int diam2 = right.ht;
        int diam3 = left.ht + right.ht + 1;
         
        int mydiam =  Math.max(Math.max(diam1,diam2),diam3);
        
        Treeinfo myinfo = new Treeinfo(myheight,mydiam);
        return myinfo;
    }
    
    
	public static void main(String[] args) {
	    int nodes[] = {1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
		BinaryTree build  = new BinaryTree();
	  Node root = 	build.buildtree(nodes);
	  Main tree = new Main();
	  
	  tree.Levelorder(root);
	  int totalNode = countofNodes(root);
	  System.out.println(totalNode);
	  
	  int SumOfnodes = SumofNodes(root);
	  System.out.println(SumOfnodes);
	  
	  int TreeHeight = HeightofTree(root);
	  System.out.println(TreeHeight);
	  
	  int diameter = Diameter(root);
	  System.out.println(diameter);
	  
	  Treeinfo diam2 = diameter2(root);
	  System.out.println(diam2.diam);
	 
	}
}
