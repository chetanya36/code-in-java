class Solution{
	int [] lexicographicallyLargest(int [] arr, int n) {
      
     int i=0;
     while(i<n)
     {
         int j;
         for(j=i+1;j<n &&arr[j]%2 == arr[j-1]%2;j++){
             
         }
         Sort(arr,i,j);
         i=j;
     }
     return arr;
	}
	public static void Sort(int arr[],int i,int j)
	{
	    Arrays.sort(arr,i,j);
	    int temp=0;
	    while(i<j)
	    {
	        j--;
	        temp = arr[i];
	        arr[i] = arr[j];
	        arr[j] = temp;
	        i++;
	    }
	}
}

Description
You are given an array a and you need to generate an array b. You are allowed to apply only one type of operation on the array a, 
any number of times. In one operation you can swap ai, ai+1 if ai+ai+1 is even.
Array b should be generated after applying the above operation any number of times on array a and array b should be lexicographically 
the largest among all arrays that can be generated from array a, 
after applying the above operation any number of times.



Input:
N=3
a[]={1,3,5}
Output:
5,3,1
Explanation: [1,3,5],[1,5,3],[3,1,5],[3,5,1],
[5,1,3] and [5,3,1] are all possible
values of array b while the last one is 
lexicographically largest.
