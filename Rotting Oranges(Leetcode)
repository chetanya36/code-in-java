class Solution {
       static class Pair{
           int r;
           int c;
           Pair(int r,int c)
           {
               this.r = r;
               this.c = c; 
           }
       }
    public int orangesRotting(int[][] grid) {
            int row[] = {1,-1,0,0};
            int col[] = {0,0,-1,1};
            int total_orange=0,rotten_orange=0;
            Queue<Pair> q =  new LinkedList<>();
            int n1 = grid.length;
            int n2  = grid[0].length;
            int count=0;
            for(int i=0;i<n1;i++)
            {
                for(int j=0;j<n2;j++)
                {
                    if(grid[i][j] == 2){
                      q.add(new Pair(i,j));
                      rotten_orange++;
                    }
                   if(grid[i][j] == 1 || grid[i][j] == 2)
                     total_orange++;
                }
            }
            System.out.println(total_orange);
            System.out.println(rotten_orange);
            q.add(new Pair(-1,-1));
            while(!q.isEmpty())
            {
                Pair p = q.remove();
                int i = p.r;
                int j = p.c;
                if(i==-1 && j==-1)
                {
                    if(q.isEmpty())
                      break;
                      else{
                        count++;
                       q.add(new Pair(-1,-1));
                      }
                }
                else
                {
                   for(int k=0;k<4;k++)
                 {
                     int p1 = i;
                     int p2 = j;
                    p1 = i+row[k];
                    p2 = j+col[k];
                    if((p1>=0 && p1<n1) && (p2>=0 && p2<n2))
                    {
                        if(grid[p1][p2] == 1)
                        {
                            q.add(new Pair(p1,p2));
                            grid[p1][p2] = 2;
                            rotten_orange++;
                        }
                    }
                  }
                }
            }
            if(total_orange !=rotten_orange)
               return -1;
            return count;
    }
}
