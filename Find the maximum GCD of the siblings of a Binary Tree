Approach 1 using Depth first search
class Solution {
   
        static int gcd(int a, int b)
    {
        if (b == 0)
            return a;
        else
            return gcd(b, a % b);
    }
     int N1=0;int max1=0;
    void preorder(Node root)
    {
        int max=0;
        if(root == null)
           return ;
           if(root.left!=null && root.right!=null)
           {
               max =  gcd(root.left.data,root.right.data);
               if(max>max1)
               {
                   N1 = root.data;
                   max1 = max;
               }
               else if(max == max1)
               {
                   N1 = Math.max(N1,root.data);
               }
           }
         preorder(root.left);
         preorder(root.right);
           
         
    }
    int maxGCD(Node root) {
      preorder(root);
      return N1;
      
    
    
    }
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Approach Breadth first search
class Solution {
    
        static int gcd(int a, int b)
    {
        if (b == 0)
            return a;
        else
            return gcd(b, a % b);
    }
    
    int maxGCD(Node root) {
        if(root == null)
         return -1;
        Queue<Node> q  = new LinkedList<>();
        q.add(root);
        int t1,t2;
        int N1=0;
        int max=0,max1=0;
        while(!q.isEmpty())
        {
            t1=0;
            t2=0;
            Node currNode = q.remove();
            if(currNode.left!=null )
            {
                q.add(currNode.left);
                t1 = currNode.left.data;
            }
            if(currNode.right!=null)
            {
                 q.add(currNode.right);
                 t2 = currNode.right.data;
            }
            if(currNode.left!=null &&  currNode.right!=null)
            {
             max1  = gcd(t2,t1);
               if(max1>max)
               {
                 N1 = currNode.data;
                 max = max1;
               }
               else if(max1 == max)
               {
                   N1 = Math.max(N1,currNode.data);
               }
            }
            
        }
        return N1;
    }
}
// Descrption
Given a binary tree. The task is to find the maximum GCD of the siblings of this tree. You have to return the value of the node whose two immediate children has the maximum gcd.
If there are multiple such nodes, return the node which has the maximum value.

Siblings: Nodes with the same parent are called siblings.

GCD (Greatest Common Divisor) of two positive integers is the largest positive integer that divides both numbers without a remainder.

