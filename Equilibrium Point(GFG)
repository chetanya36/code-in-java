Optimize Approach

class Solution {

    
    // a: input array
    // n: size of array
    // Function to find equilibrium point in the array.
    public static int equilibriumPoint(long arr[], int n) {
        if(n==1)
          return 1;
          long sum =0;
      for(int i=0;i<n;i++)
      {
          sum =  sum+arr[i];
      }
      long prefix_sum=arr[0];
      for(int i=1;i<n;i++)
      {
          long temp = sum - prefix_sum - arr[i];
          if(prefix_sum == temp)
          {
              return i+1;
          }
          prefix_sum +=arr[i];
      }
      return -1;
     
    }
    
}
_______________________________________________________________________________________________________________
Brute forece Approach


class Solution {

    
    // a: input array
    // n: size of array
    // Function to find equilibrium point in the array.
    public static int equilibriumPoint(long arr[], int n) {
        if(n==1)
          return 1;
        for(int k=1;k<n;k++){
            int left_sum =0;
            int right_sum =0;
            for(int i=k-1;i>=0;i--)
            {
                left_sum +=arr[i];
            }
            for(int i=k+1;i<n;i++)
            {
                right_sum +=arr[i];
            }
            if(left_sum  == right_sum)
              return k+1;
        }
        return -1;
    }
    
}
