class Spiral
{
    //Function to return a list containing the level order 
    //traversal in spiral form.	
    ArrayList<Integer> findSpiral(Node root) 
    {
        ArrayList<Integer> List = new ArrayList<>();
        if(root ==null)
        return List;
        Stack<Node> stack1 = new Stack<>();
        Stack<Node> stack2 = new Stack<>();
        stack1.add(root);
       while(!stack1.isEmpty() || !stack2.isEmpty())
       {
           while(!stack1.isEmpty())
           {
               Node currNode = stack1.pop();
               List.add(currNode.data);
               if(currNode.right!=null)
              {
                stack2.add(currNode.right);
              }
              if(currNode.left!=null)
              {
                stack2.add(currNode.left);
              }
           }
          
           while(!stack2.isEmpty())
           {
               Node currNode = stack2.pop();
               List.add(currNode.data);
               if(currNode.left!=null)
              {
                stack1.add(currNode.left);
              }
               if(currNode.right!=null)
              {
                stack1.add(currNode.right);
              }
           }
       }
       return List;
        
    }
}
_________________________________________________________________________________________________
Another Solution using one stack and one queue

class Spiral
{
    //Function to return a list containing the level order 
    //traversal in spiral form.	
    ArrayList<Integer> findSpiral(Node root) 
    {
        Stack<Integer> stack = new Stack<Integer>();
        Queue<Node> q = new LinkedList<>();
        ArrayList<Integer> list = new ArrayList<>();
        q.add(root);
        q.add(null);
        list.add(root.data);
        int i=0;
        while(!q.isEmpty())
        { 
            Node curr = q.remove();
            if(i%2 !=0 && i!=0)
            {
                if(curr != null)
                list.add(curr.data);
            }
            if(i%2 ==0 && i!=0)
            {
                if(curr!=null)
                 stack.add(curr.data);
            }
            if(curr == null)
            {
                if(q.isEmpty())
                break;
                else
                q.add(null);
                i++;
                 if(i%2 != 0)
               {
                while(!stack.isEmpty())
                {
                    list.add(stack.pop());
                }
               }
            }
            else
            {
                  if(curr.left!=null)
                    q.add(curr.left);
                  if(curr.right!=null)
                    q.add(curr.right);
            }
        }
                while(!stack.isEmpty())
                {
                    list.add(stack.pop());
                }
        return list;
    }
}
